package co.edu.uco.deviucopay.business.usecase.impl.cuenta;

import co.edu.uco.deviucopay.business.usecase.UseCaseWithoutReturn;
import co.edu.uco.deviucopay.crosscutting.exceptions.DeviUcopayException;
import co.edu.uco.deviucopay.data.dao.entity.CuentaDAO;

public class EliminarCuenta implements UseCaseWithoutReturn<String> {

    private final CuentaDAO cuentaDAO;
    private final int longitudNumeroCuenta = 10; // Longitud exacta del número de cuenta

    public EliminarCuenta(CuentaDAO cuentaDAO) {
        this.cuentaDAO = cuentaDAO;
    }

    @Override
    public void execute(String numeroCuenta) {
        // Validación de longitud exacta
        if (numeroCuenta.length() != longitudNumeroCuenta) {
            var mensajeUsuario = "El número de cuenta debe tener exactamente " + longitudNumeroCuenta + " caracteres.";
            throw new DeviUcopayException(mensajeUsuario);
        }

        // Validación de que solo contenga números
        if (!numeroCuenta.matches("\\d{" + longitudNumeroCuenta + "}")) {
            var mensajeUsuario = "El número de cuenta debe contener solo números.";
            throw new DeviUcopayException(mensajeUsuario);
        }

        // Verificar si la cuenta existe
        if (!cuentaDAO.existePorNumeroCuenta(numeroCuenta)) {
            var mensajeUsuario = "La cuenta no existe.";
            throw new DeviUcopayException(mensajeUsuario);
        }

        // Obtener saldo y verificar que sea cero
        double saldo = cuentaDAO.obtenerSaldoPorNumeroCuenta(numeroCuenta);
        if (saldo != 0.0) {
            var mensajeUsuario = "La cuenta no puede ser eliminada porque su saldo no es cero.";
            throw new DeviUcopayException(mensajeUsuario);
        }

        // Eliminar la cuenta
        cuentaDAO.eliminarPorNumeroCuenta(numeroCuenta);
    }
}
