package co.edu.uco.deviucopay.business.usecase.impl.cuenta;

import java.util.List;
import java.util.UUID;

import co.edu.uco.deviucopay.business.assembler.entity.impl.AfiliadoAssemblerEntity;
import co.edu.uco.deviucopay.business.assembler.entity.impl.TipoCuentaAssemblerEntity;
import co.edu.uco.deviucopay.business.domain.CuentaDomain;
import co.edu.uco.deviucopay.business.usecase.UseCaseWithoutReturn;
import co.edu.uco.deviucopay.crosscutting.exceptions.customs.BusinessDeviUcopayException;
import co.edu.uco.deviucopay.crosscutting.exceptions.messageCatalog.MessageCatalogStrategy;
import co.edu.uco.deviucopay.crosscutting.exceptions.messageCatalog.data.CodigoMensaje;
import co.edu.uco.deviucopay.crosscutting.helpers.FloatHelper;
import co.edu.uco.deviucopay.crosscutting.helpers.ObjectHelper;
import co.edu.uco.deviucopay.crosscutting.helpers.TextHelper;
import co.edu.uco.deviucopay.crosscutting.helpers.UUIDHelper;
import co.edu.uco.deviucopay.data.dao.factory.DAOFactory;
import co.edu.uco.deviucopay.entity.AfiliadoEntity;
import co.edu.uco.deviucopay.entity.CuentaEntity;

public final class RegistrarCuenta implements UseCaseWithoutReturn<CuentaDomain> {

    private DAOFactory factory;

    public RegistrarCuenta(final DAOFactory factory) {
        if (ObjectHelper.getObjectHelper().isNull(factory)) {
        	var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00043);
			var mensajeTecnico = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00031);
			
            throw new BusinessDeviUcopayException(mensajeTecnico, mensajeUsuario);
        }

        this.factory = factory;
    }

    @Override
    public void execute(final CuentaDomain data) {
        validarDatos(data);

        AfiliadoEntity afiliadoFilter = AfiliadoEntity.build().setNumeroIdAfiliado(data.getAfiliado().getNumeroIdAfiliado());
        List<AfiliadoEntity> afiliadoEntities = factory.getAfiliadoDAO().consultar(afiliadoFilter);

        if (afiliadoEntities == null || afiliadoEntities.isEmpty()) {
        	var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00050);
            throw new BusinessDeviUcopayException(mensajeUsuario);
        }

        AfiliadoEntity afiliadoEntity = afiliadoEntities.get(0);

       
        var cuentaExistente = factory.getCuentaDAO().consultar(CuentaEntity.build().setAfiliado(afiliadoEntity));
        if (cuentaExistente.isEmpty()) {
        	var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00051);
            
            throw new BusinessDeviUcopayException(mensajeUsuario);
        }

       
        var numeroCuenta = generarNumeroCuentaUnico();
        var cuentaEntity = CuentaEntity.build()
            .setId(generarIdentificadorCuenta())
            .setNumeroCuenta(numeroCuenta)
            .setPin(data.getPin()) 
            .setSaldo(FloatHelper.ZERO)
            .setAfiliado(afiliadoEntity)
            .setTipoCuenta(TipoCuentaAssemblerEntity.getInstance().toEntity(data.getTipoCuenta()));

        factory.getCuentaDAO().crear(cuentaEntity);
    }

    private void validarMismoNumeroCuenta(final String numeroCuenta) {
		var cuentaEntity = CuentaEntity.build().setNumeroCuenta(numeroCuenta);

		var resultados = factory.getCuentaDAO().consultar(cuentaEntity);

		if (!resultados.isEmpty()) {
			var mensajeUsuario = TextHelper.reemplazarParametro(MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00062), numeroCuenta);
			throw new BusinessDeviUcopayException(mensajeUsuario);
		}
	}
    
    private UUID generarIdentificadorCuenta() {
        UUID id;
        boolean existeId;

        do {
            id = UUIDHelper.generate();
            var cuentaEntity = CuentaEntity.build().setId(id);
            var resultados = factory.getCuentaDAO().consultar(cuentaEntity);
            existeId = !resultados.isEmpty();
        } while (existeId);

        return id;
    }

    private String generarNumeroCuentaUnico() {
        String numeroCuenta;
        boolean existeNumero;

        do {
            numeroCuenta = String.valueOf(1000000000L + (long)(Math.random() * 9000000000L));
            var cuentaEntity = CuentaEntity.build().setNumeroCuenta(numeroCuenta);
            var resultados = factory.getCuentaDAO().consultar(cuentaEntity);
            existeNumero = !resultados.isEmpty();
        } while (existeNumero);

        return numeroCuenta;
    }

    private void validarPin(final String pin) {
        if (TextHelper.isNullOrEmpty(pin)) {
        	var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00052);
       
            throw new BusinessDeviUcopayException(mensajeUsuario);
        }

        if (!pin.matches("\\d{4}")) {
        	var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00053);
            throw new BusinessDeviUcopayException(mensajeUsuario);
        }
    }

    private void validarSaldo(final float saldo) {
        if (saldo != FloatHelper.ZERO) {
        	var mensajeUsuario = MessageCatalogStrategy.getContenidoMensaje(CodigoMensaje.M00055);
            throw new BusinessDeviUcopayException(mensajeUsuario);
        }
    }
    private void validarDatos(CuentaDomain data) {
        validarPin(data.getPin());
        validarSaldo(data.getSaldo());
        validarMismoNumeroCuenta(data.getNumeroCuenta());
    }
    
}
